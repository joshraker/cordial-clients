=begin
#Cordial

#A cooperative word puzzle game!

The version of the OpenAPI document: 0.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module Cordial
  class GamesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new game.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGameProps] :create_game_props 
    # @return [Game]
    def create_game(opts = {})
      data, _status_code, _headers = create_game_with_http_info(opts)
      data
    end

    # Creates a new game.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGameProps] :create_game_props 
    # @return [Array<(Game, Integer, Hash)>] Game data, response status code and response headers
    def create_game_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GamesApi.create_game ...'
      end
      # resource path
      local_var_path = '/games'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_game_props'])

      # return_type
      return_type = opts[:debug_return_type] || 'Game'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"GamesApi.create_game",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GamesApi#create_game\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make a guess for the specified game.
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGuessProps] :create_guess_props 
    # @return [Game]
    def create_guess(id, opts = {})
      data, _status_code, _headers = create_guess_with_http_info(id, opts)
      data
    end

    # Make a guess for the specified game.
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateGuessProps] :create_guess_props 
    # @return [Array<(Game, Integer, Hash)>] Game data, response status code and response headers
    def create_guess_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GamesApi.create_guess ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GamesApi.create_guess"
      end
      # resource path
      local_var_path = '/games/{id}/guess'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_guess_props'])

      # return_type
      return_type = opts[:debug_return_type] || 'Game'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"GamesApi.create_guess",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GamesApi#create_guess\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the specified game.
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Game]
    def delete_game(id, opts = {})
      data, _status_code, _headers = delete_game_with_http_info(id, opts)
      data
    end

    # Deletes the specified game.
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Game, Integer, Hash)>] Game data, response status code and response headers
    def delete_game_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GamesApi.delete_game ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GamesApi.delete_game"
      end
      # resource path
      local_var_path = '/games/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Game'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"GamesApi.delete_game",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GamesApi#delete_game\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the specified game.
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Game]
    def get_game(id, opts = {})
      data, _status_code, _headers = get_game_with_http_info(id, opts)
      data
    end

    # Returns the specified game.
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Game, Integer, Hash)>] Game data, response status code and response headers
    def get_game_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GamesApi.get_game ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling GamesApi.get_game"
      end
      # resource path
      local_var_path = '/games/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Game'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"GamesApi.get_game",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GamesApi#get_game\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all accessible games.
    # @param [Hash] opts the optional parameters
    # @return [Array<Game>]
    def list_games(opts = {})
      data, _status_code, _headers = list_games_with_http_info(opts)
      data
    end

    # Returns all accessible games.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Game>, Integer, Hash)>] Array<Game> data, response status code and response headers
    def list_games_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GamesApi.list_games ...'
      end
      # resource path
      local_var_path = '/games'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Game>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['token']

      new_options = opts.merge(
        :operation => :"GamesApi.list_games",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GamesApi#list_games\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
