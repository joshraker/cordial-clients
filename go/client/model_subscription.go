/*
Cordial

A cooperative word puzzle game!

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Subscription struct for Subscription
type Subscription struct {
	PushToken *string `json:"pushToken,omitempty"`
	Endpoint *string `json:"endpoint,omitempty"`
	Keys *SubscriptionKeys `json:"keys,omitempty"`
}

// NewSubscription instantiates a new Subscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscription() *Subscription {
	this := Subscription{}
	return &this
}

// NewSubscriptionWithDefaults instantiates a new Subscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionWithDefaults() *Subscription {
	this := Subscription{}
	return &this
}

// GetPushToken returns the PushToken field value if set, zero value otherwise.
func (o *Subscription) GetPushToken() string {
	if o == nil || o.PushToken == nil {
		var ret string
		return ret
	}
	return *o.PushToken
}

// GetPushTokenOk returns a tuple with the PushToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetPushTokenOk() (*string, bool) {
	if o == nil || o.PushToken == nil {
		return nil, false
	}
	return o.PushToken, true
}

// HasPushToken returns a boolean if a field has been set.
func (o *Subscription) HasPushToken() bool {
	if o != nil && o.PushToken != nil {
		return true
	}

	return false
}

// SetPushToken gets a reference to the given string and assigns it to the PushToken field.
func (o *Subscription) SetPushToken(v string) {
	o.PushToken = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *Subscription) GetEndpoint() string {
	if o == nil || o.Endpoint == nil {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetEndpointOk() (*string, bool) {
	if o == nil || o.Endpoint == nil {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *Subscription) HasEndpoint() bool {
	if o != nil && o.Endpoint != nil {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *Subscription) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *Subscription) GetKeys() SubscriptionKeys {
	if o == nil || o.Keys == nil {
		var ret SubscriptionKeys
		return ret
	}
	return *o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subscription) GetKeysOk() (*SubscriptionKeys, bool) {
	if o == nil || o.Keys == nil {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *Subscription) HasKeys() bool {
	if o != nil && o.Keys != nil {
		return true
	}

	return false
}

// SetKeys gets a reference to the given SubscriptionKeys and assigns it to the Keys field.
func (o *Subscription) SetKeys(v SubscriptionKeys) {
	o.Keys = &v
}

func (o Subscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PushToken != nil {
		toSerialize["pushToken"] = o.PushToken
	}
	if o.Endpoint != nil {
		toSerialize["endpoint"] = o.Endpoint
	}
	if o.Keys != nil {
		toSerialize["keys"] = o.Keys
	}
	return json.Marshal(toSerialize)
}

type NullableSubscription struct {
	value *Subscription
	isSet bool
}

func (v NullableSubscription) Get() *Subscription {
	return v.value
}

func (v *NullableSubscription) Set(val *Subscription) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscription(val *Subscription) *NullableSubscription {
	return &NullableSubscription{value: val, isSet: true}
}

func (v NullableSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


