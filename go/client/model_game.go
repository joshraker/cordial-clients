/*
Cordial

A cooperative word puzzle game!

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cordial

import (
	"encoding/json"
	"time"
)

// Game struct for Game
type Game struct {
	Id *int64 `json:"id,omitempty"`
	DiscardedAt NullableTime `json:"discardedAt,omitempty"`
	Word NullableString `json:"word,omitempty"`
	RequesterId *string `json:"requesterId,omitempty"`
	Requester *User `json:"requester,omitempty"`
	AcceptorId *string `json:"acceptorId,omitempty"`
	Acceptor *User `json:"acceptor,omitempty"`
	CurrentUserId *string `json:"currentUserId,omitempty"`
	CurrentUser *User `json:"currentUser,omitempty"`
	IsWon NullableBool `json:"isWon,omitempty"`
	Guesses []Guess `json:"guesses,omitempty"`
}

// NewGame instantiates a new Game object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGame() *Game {
	this := Game{}
	return &this
}

// NewGameWithDefaults instantiates a new Game object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGameWithDefaults() *Game {
	this := Game{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Game) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Game) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Game) SetId(v int64) {
	o.Id = &v
}

// GetDiscardedAt returns the DiscardedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Game) GetDiscardedAt() time.Time {
	if o == nil || isNil(o.DiscardedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DiscardedAt.Get()
}

// GetDiscardedAtOk returns a tuple with the DiscardedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Game) GetDiscardedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.DiscardedAt.Get(), o.DiscardedAt.IsSet()
}

// HasDiscardedAt returns a boolean if a field has been set.
func (o *Game) HasDiscardedAt() bool {
	if o != nil && o.DiscardedAt.IsSet() {
		return true
	}

	return false
}

// SetDiscardedAt gets a reference to the given NullableTime and assigns it to the DiscardedAt field.
func (o *Game) SetDiscardedAt(v time.Time) {
	o.DiscardedAt.Set(&v)
}
// SetDiscardedAtNil sets the value for DiscardedAt to be an explicit nil
func (o *Game) SetDiscardedAtNil() {
	o.DiscardedAt.Set(nil)
}

// UnsetDiscardedAt ensures that no value is present for DiscardedAt, not even an explicit nil
func (o *Game) UnsetDiscardedAt() {
	o.DiscardedAt.Unset()
}

// GetWord returns the Word field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Game) GetWord() string {
	if o == nil || isNil(o.Word.Get()) {
		var ret string
		return ret
	}
	return *o.Word.Get()
}

// GetWordOk returns a tuple with the Word field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Game) GetWordOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Word.Get(), o.Word.IsSet()
}

// HasWord returns a boolean if a field has been set.
func (o *Game) HasWord() bool {
	if o != nil && o.Word.IsSet() {
		return true
	}

	return false
}

// SetWord gets a reference to the given NullableString and assigns it to the Word field.
func (o *Game) SetWord(v string) {
	o.Word.Set(&v)
}
// SetWordNil sets the value for Word to be an explicit nil
func (o *Game) SetWordNil() {
	o.Word.Set(nil)
}

// UnsetWord ensures that no value is present for Word, not even an explicit nil
func (o *Game) UnsetWord() {
	o.Word.Unset()
}

// GetRequesterId returns the RequesterId field value if set, zero value otherwise.
func (o *Game) GetRequesterId() string {
	if o == nil || isNil(o.RequesterId) {
		var ret string
		return ret
	}
	return *o.RequesterId
}

// GetRequesterIdOk returns a tuple with the RequesterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetRequesterIdOk() (*string, bool) {
	if o == nil || isNil(o.RequesterId) {
    return nil, false
	}
	return o.RequesterId, true
}

// HasRequesterId returns a boolean if a field has been set.
func (o *Game) HasRequesterId() bool {
	if o != nil && !isNil(o.RequesterId) {
		return true
	}

	return false
}

// SetRequesterId gets a reference to the given string and assigns it to the RequesterId field.
func (o *Game) SetRequesterId(v string) {
	o.RequesterId = &v
}

// GetRequester returns the Requester field value if set, zero value otherwise.
func (o *Game) GetRequester() User {
	if o == nil || isNil(o.Requester) {
		var ret User
		return ret
	}
	return *o.Requester
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetRequesterOk() (*User, bool) {
	if o == nil || isNil(o.Requester) {
    return nil, false
	}
	return o.Requester, true
}

// HasRequester returns a boolean if a field has been set.
func (o *Game) HasRequester() bool {
	if o != nil && !isNil(o.Requester) {
		return true
	}

	return false
}

// SetRequester gets a reference to the given User and assigns it to the Requester field.
func (o *Game) SetRequester(v User) {
	o.Requester = &v
}

// GetAcceptorId returns the AcceptorId field value if set, zero value otherwise.
func (o *Game) GetAcceptorId() string {
	if o == nil || isNil(o.AcceptorId) {
		var ret string
		return ret
	}
	return *o.AcceptorId
}

// GetAcceptorIdOk returns a tuple with the AcceptorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetAcceptorIdOk() (*string, bool) {
	if o == nil || isNil(o.AcceptorId) {
    return nil, false
	}
	return o.AcceptorId, true
}

// HasAcceptorId returns a boolean if a field has been set.
func (o *Game) HasAcceptorId() bool {
	if o != nil && !isNil(o.AcceptorId) {
		return true
	}

	return false
}

// SetAcceptorId gets a reference to the given string and assigns it to the AcceptorId field.
func (o *Game) SetAcceptorId(v string) {
	o.AcceptorId = &v
}

// GetAcceptor returns the Acceptor field value if set, zero value otherwise.
func (o *Game) GetAcceptor() User {
	if o == nil || isNil(o.Acceptor) {
		var ret User
		return ret
	}
	return *o.Acceptor
}

// GetAcceptorOk returns a tuple with the Acceptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetAcceptorOk() (*User, bool) {
	if o == nil || isNil(o.Acceptor) {
    return nil, false
	}
	return o.Acceptor, true
}

// HasAcceptor returns a boolean if a field has been set.
func (o *Game) HasAcceptor() bool {
	if o != nil && !isNil(o.Acceptor) {
		return true
	}

	return false
}

// SetAcceptor gets a reference to the given User and assigns it to the Acceptor field.
func (o *Game) SetAcceptor(v User) {
	o.Acceptor = &v
}

// GetCurrentUserId returns the CurrentUserId field value if set, zero value otherwise.
func (o *Game) GetCurrentUserId() string {
	if o == nil || isNil(o.CurrentUserId) {
		var ret string
		return ret
	}
	return *o.CurrentUserId
}

// GetCurrentUserIdOk returns a tuple with the CurrentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetCurrentUserIdOk() (*string, bool) {
	if o == nil || isNil(o.CurrentUserId) {
    return nil, false
	}
	return o.CurrentUserId, true
}

// HasCurrentUserId returns a boolean if a field has been set.
func (o *Game) HasCurrentUserId() bool {
	if o != nil && !isNil(o.CurrentUserId) {
		return true
	}

	return false
}

// SetCurrentUserId gets a reference to the given string and assigns it to the CurrentUserId field.
func (o *Game) SetCurrentUserId(v string) {
	o.CurrentUserId = &v
}

// GetCurrentUser returns the CurrentUser field value if set, zero value otherwise.
func (o *Game) GetCurrentUser() User {
	if o == nil || isNil(o.CurrentUser) {
		var ret User
		return ret
	}
	return *o.CurrentUser
}

// GetCurrentUserOk returns a tuple with the CurrentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetCurrentUserOk() (*User, bool) {
	if o == nil || isNil(o.CurrentUser) {
    return nil, false
	}
	return o.CurrentUser, true
}

// HasCurrentUser returns a boolean if a field has been set.
func (o *Game) HasCurrentUser() bool {
	if o != nil && !isNil(o.CurrentUser) {
		return true
	}

	return false
}

// SetCurrentUser gets a reference to the given User and assigns it to the CurrentUser field.
func (o *Game) SetCurrentUser(v User) {
	o.CurrentUser = &v
}

// GetIsWon returns the IsWon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Game) GetIsWon() bool {
	if o == nil || isNil(o.IsWon.Get()) {
		var ret bool
		return ret
	}
	return *o.IsWon.Get()
}

// GetIsWonOk returns a tuple with the IsWon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Game) GetIsWonOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.IsWon.Get(), o.IsWon.IsSet()
}

// HasIsWon returns a boolean if a field has been set.
func (o *Game) HasIsWon() bool {
	if o != nil && o.IsWon.IsSet() {
		return true
	}

	return false
}

// SetIsWon gets a reference to the given NullableBool and assigns it to the IsWon field.
func (o *Game) SetIsWon(v bool) {
	o.IsWon.Set(&v)
}
// SetIsWonNil sets the value for IsWon to be an explicit nil
func (o *Game) SetIsWonNil() {
	o.IsWon.Set(nil)
}

// UnsetIsWon ensures that no value is present for IsWon, not even an explicit nil
func (o *Game) UnsetIsWon() {
	o.IsWon.Unset()
}

// GetGuesses returns the Guesses field value if set, zero value otherwise.
func (o *Game) GetGuesses() []Guess {
	if o == nil || isNil(o.Guesses) {
		var ret []Guess
		return ret
	}
	return o.Guesses
}

// GetGuessesOk returns a tuple with the Guesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Game) GetGuessesOk() ([]Guess, bool) {
	if o == nil || isNil(o.Guesses) {
    return nil, false
	}
	return o.Guesses, true
}

// HasGuesses returns a boolean if a field has been set.
func (o *Game) HasGuesses() bool {
	if o != nil && !isNil(o.Guesses) {
		return true
	}

	return false
}

// SetGuesses gets a reference to the given []Guess and assigns it to the Guesses field.
func (o *Game) SetGuesses(v []Guess) {
	o.Guesses = v
}

func (o Game) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.DiscardedAt.IsSet() {
		toSerialize["discardedAt"] = o.DiscardedAt.Get()
	}
	if o.Word.IsSet() {
		toSerialize["word"] = o.Word.Get()
	}
	if !isNil(o.RequesterId) {
		toSerialize["requesterId"] = o.RequesterId
	}
	if !isNil(o.Requester) {
		toSerialize["requester"] = o.Requester
	}
	if !isNil(o.AcceptorId) {
		toSerialize["acceptorId"] = o.AcceptorId
	}
	if !isNil(o.Acceptor) {
		toSerialize["acceptor"] = o.Acceptor
	}
	if !isNil(o.CurrentUserId) {
		toSerialize["currentUserId"] = o.CurrentUserId
	}
	if !isNil(o.CurrentUser) {
		toSerialize["currentUser"] = o.CurrentUser
	}
	if o.IsWon.IsSet() {
		toSerialize["isWon"] = o.IsWon.Get()
	}
	if !isNil(o.Guesses) {
		toSerialize["guesses"] = o.Guesses
	}
	return json.Marshal(toSerialize)
}

type NullableGame struct {
	value *Game
	isSet bool
}

func (v NullableGame) Get() *Game {
	return v.value
}

func (v *NullableGame) Set(val *Game) {
	v.value = val
	v.isSet = true
}

func (v NullableGame) IsSet() bool {
	return v.isSet
}

func (v *NullableGame) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGame(val *Game) *NullableGame {
	return &NullableGame{value: val, isSet: true}
}

func (v NullableGame) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGame) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


