/*
Cordial

A cooperative word puzzle game!

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cordial

import (
	"encoding/json"
	"time"
)

// Token struct for Token
type Token struct {
	Id *int64 `json:"id,omitempty"`
	DiscardedAt NullableTime `json:"discardedAt,omitempty"`
	AccessToken *string `json:"accessToken,omitempty"`
}

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken() *Token {
	this := Token{}
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Token) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Token) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Token) SetId(v int64) {
	o.Id = &v
}

// GetDiscardedAt returns the DiscardedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetDiscardedAt() time.Time {
	if o == nil || isNil(o.DiscardedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DiscardedAt.Get()
}

// GetDiscardedAtOk returns a tuple with the DiscardedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetDiscardedAtOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return o.DiscardedAt.Get(), o.DiscardedAt.IsSet()
}

// HasDiscardedAt returns a boolean if a field has been set.
func (o *Token) HasDiscardedAt() bool {
	if o != nil && o.DiscardedAt.IsSet() {
		return true
	}

	return false
}

// SetDiscardedAt gets a reference to the given NullableTime and assigns it to the DiscardedAt field.
func (o *Token) SetDiscardedAt(v time.Time) {
	o.DiscardedAt.Set(&v)
}
// SetDiscardedAtNil sets the value for DiscardedAt to be an explicit nil
func (o *Token) SetDiscardedAtNil() {
	o.DiscardedAt.Set(nil)
}

// UnsetDiscardedAt ensures that no value is present for DiscardedAt, not even an explicit nil
func (o *Token) UnsetDiscardedAt() {
	o.DiscardedAt.Unset()
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *Token) GetAccessToken() string {
	if o == nil || isNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetAccessTokenOk() (*string, bool) {
	if o == nil || isNil(o.AccessToken) {
    return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *Token) HasAccessToken() bool {
	if o != nil && !isNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *Token) SetAccessToken(v string) {
	o.AccessToken = &v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.DiscardedAt.IsSet() {
		toSerialize["discardedAt"] = o.DiscardedAt.Get()
	}
	if !isNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	return json.Marshal(toSerialize)
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


